import { addDays, closestTo, eachDayOfInterval, endOfWeek, format, getDay, isAfter, isBefore, isEqual, isWithinInterval, startOfWeek, getYear, getMonth, getDate } from 'date-fns';
import { DAY_INDEX_REMAPPING } from '../constants';
var getDateWithoutTime = function (date) {
    return new Date(getYear(date), getMonth(date), getDate(date));
};
var getDateOrMinFromRange = function (date, min, max) {
    return isWithinInterval(date, { start: min, end: max }) ? date : min;
};
var getDateOrMin = function (date, min) {
    return isEqualDate(date, min) || isAfterDate(date, min) ? date : min;
};
var getFirstDateNotBlacklisted = function (date, blacklist) {
    var d = date;
    while (!!blacklist.find(function (bDate) { return isEqualDate(d, bDate); })) {
        d = addDays(d, 1);
    }
    return d;
};
export var isEqualDate = function (a, b) {
    return isEqual(getDateWithoutTime(a), getDateWithoutTime(b));
};
export var isBeforeDate = function (a, b) {
    return isBefore(getDateWithoutTime(a), getDateWithoutTime(b));
};
export var isAfterDate = function (a, b) {
    return isAfter(getDateWithoutTime(a), getDateWithoutTime(b));
};
export var getDayRemapped = function (date) {
    return DAY_INDEX_REMAPPING[getDay(date)];
};
export var getWeekDays = function (locale) {
    var now = new Date();
    var weekDates = eachDayOfInterval({
        start: startOfWeek(now),
        end: endOfWeek(now)
    });
    weekDates.push(weekDates[0]);
    weekDates.shift();
    return weekDates.map(function (date) { return format(date, 'EEEEEE', { locale: locale }); });
};
export var dateIsSelectable = function (_a) {
    var date = _a.date, minDate = _a.minDate, maxDate = _a.maxDate, excludeDates = _a.excludeDates, includeDates = _a.includeDates;
    var isBeforeMinDate = minDate ? isBeforeDate(date, minDate) : false;
    var isAfterMaxDate = maxDate ? isAfterDate(date, maxDate) : false;
    var isExcluded = excludeDates
        ? !!excludeDates.find(function (d) { return isEqualDate(date, d); })
        : false;
    var isIncluded = includeDates
        ? !!includeDates.find(function (d) { return isEqualDate(date, d); })
        : true;
    return !isBeforeMinDate && !isAfterMaxDate && !isExcluded && isIncluded
        ? true
        : false;
};
export var getClosestSelectableDate = function (_a) {
    var date = _a.date, minDate = _a.minDate, maxDate = _a.maxDate, excludeDates = _a.excludeDates, includeDates = _a.includeDates;
    if (minDate && maxDate) {
        return getDateOrMinFromRange(date, minDate, maxDate);
    }
    if (minDate) {
        return getDateOrMin(date, minDate);
    }
    if (includeDates) {
        return closestTo(date, includeDates);
    }
    if (excludeDates) {
        return getFirstDateNotBlacklisted(date, excludeDates);
    }
    return date;
};
