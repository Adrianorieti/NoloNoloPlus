"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var date_fns_1 = require("date-fns");
var constants_1 = require("../constants");
var getDateWithoutTime = function (date) {
    return new Date(date_fns_1.getYear(date), date_fns_1.getMonth(date), date_fns_1.getDate(date));
};
var getDateOrMinFromRange = function (date, min, max) {
    return date_fns_1.isWithinInterval(date, { start: min, end: max }) ? date : min;
};
var getDateOrMin = function (date, min) {
    return exports.isEqualDate(date, min) || exports.isAfterDate(date, min) ? date : min;
};
var getFirstDateNotBlacklisted = function (date, blacklist) {
    var d = date;
    while (!!blacklist.find(function (bDate) { return exports.isEqualDate(d, bDate); })) {
        d = date_fns_1.addDays(d, 1);
    }
    return d;
};
exports.isEqualDate = function (a, b) {
    return date_fns_1.isEqual(getDateWithoutTime(a), getDateWithoutTime(b));
};
exports.isBeforeDate = function (a, b) {
    return date_fns_1.isBefore(getDateWithoutTime(a), getDateWithoutTime(b));
};
exports.isAfterDate = function (a, b) {
    return date_fns_1.isAfter(getDateWithoutTime(a), getDateWithoutTime(b));
};
exports.getDayRemapped = function (date) {
    return constants_1.DAY_INDEX_REMAPPING[date_fns_1.getDay(date)];
};
exports.getWeekDays = function (locale) {
    var now = new Date();
    var weekDates = date_fns_1.eachDayOfInterval({
        start: date_fns_1.startOfWeek(now),
        end: date_fns_1.endOfWeek(now)
    });
    weekDates.push(weekDates[0]);
    weekDates.shift();
    return weekDates.map(function (date) { return date_fns_1.format(date, 'EEEEEE', { locale: locale }); });
};
exports.dateIsSelectable = function (_a) {
    var date = _a.date, minDate = _a.minDate, maxDate = _a.maxDate, excludeDates = _a.excludeDates, includeDates = _a.includeDates;
    var isBeforeMinDate = minDate ? exports.isBeforeDate(date, minDate) : false;
    var isAfterMaxDate = maxDate ? exports.isAfterDate(date, maxDate) : false;
    var isExcluded = excludeDates
        ? !!excludeDates.find(function (d) { return exports.isEqualDate(date, d); })
        : false;
    var isIncluded = includeDates
        ? !!includeDates.find(function (d) { return exports.isEqualDate(date, d); })
        : true;
    return !isBeforeMinDate && !isAfterMaxDate && !isExcluded && isIncluded
        ? true
        : false;
};
exports.getClosestSelectableDate = function (_a) {
    var date = _a.date, minDate = _a.minDate, maxDate = _a.maxDate, excludeDates = _a.excludeDates, includeDates = _a.includeDates;
    if (minDate && maxDate) {
        return getDateOrMinFromRange(date, minDate, maxDate);
    }
    if (minDate) {
        return getDateOrMin(date, minDate);
    }
    if (includeDates) {
        return date_fns_1.closestTo(date, includeDates);
    }
    if (excludeDates) {
        return getFirstDateNotBlacklisted(date, excludeDates);
    }
    return date;
};
