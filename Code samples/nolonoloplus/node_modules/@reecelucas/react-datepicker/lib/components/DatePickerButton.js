"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
var React = require("react");
var date_fns_1 = require("date-fns");
var DatePickerContext_1 = require("./DatePickerContext");
var actionTypes = require("../reducer/actionTypes");
var function_1 = require("../helpers/function");
var DatePickerButton = function (_a) {
    var children = _a.children, updateMonth = _a.updateMonth, props = __rest(_a, ["children", "updateMonth"]);
    var dispatch = React.useContext(DatePickerContext_1.DispatchContext);
    var _b = React.useContext(DatePickerContext_1.StateContext), year = _b.year, month = _b.month, selectedDate = _b.selectedDate, allowCellFocus = _b.allowCellFocus;
    var setFocus = function (date) {
        if (!allowCellFocus) {
            dispatch({ type: actionTypes.ALLOW_CELL_FOCUS });
        }
        dispatch({
            type: actionTypes.SET_FOCUSSED_DATE,
            payload: date_fns_1.isSameMonth(date, selectedDate) ? selectedDate : date
        });
    };
    var prev = function () {
        dispatch({ type: actionTypes.DECREMENT_MONTH });
        setFocus(date_fns_1.subMonths(new Date(year, month), 1));
    };
    var next = function () {
        dispatch({ type: actionTypes.INCREMENT_MONTH });
        setFocus(date_fns_1.addMonths(new Date(year, month), 1));
    };
    var userOnClick = props.onClick, rest = __rest(props, ["onClick"]);
    var render = function () { return (React.createElement("button", __assign({ type: 'button', onClick: function (event) {
            if (function_1.isFunction(userOnClick)) {
                userOnClick(event);
            }
            updateMonth({ prev: prev, next: next });
        } }, rest), children)); };
    return React.useMemo(render, [
        children,
        updateMonth,
        year,
        month,
        selectedDate,
        allowCellFocus,
        dispatch
    ].concat(Object.keys(props)));
};
exports.default = DatePickerButton;
