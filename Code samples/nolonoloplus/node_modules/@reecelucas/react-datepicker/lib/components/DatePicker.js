"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
var React = require("react");
var date_fns_1 = require("date-fns");
var DatePickerContext_1 = require("./DatePickerContext");
var reducer_1 = require("../reducer");
var actionTypes = require("../reducer/actionTypes");
var date_1 = require("../helpers/date");
var hooks_1 = require("../helpers/hooks");
var DatePicker = function (_a) {
    var children = _a.children, onSelect = _a.onSelect, _b = _a.initialDate, initialDate = _b === void 0 ? new Date(Date.now()) : _b, minDate = _a.minDate, maxDate = _a.maxDate, excludeDates = _a.excludeDates, includeDates = _a.includeDates, locale = _a.locale, props = __rest(_a, ["children", "onSelect", "initialDate", "minDate", "maxDate", "excludeDates", "includeDates", "locale"]);
    var calendarRef = React.useRef(null);
    var inputRef = React.useRef(null);
    var initDate = date_1.getClosestSelectableDate({
        date: initialDate,
        minDate: minDate,
        maxDate: maxDate,
        excludeDates: excludeDates,
        includeDates: includeDates
    });
    var _c = React.useReducer(reducer_1.default, {
        year: date_fns_1.getYear(initDate),
        month: date_fns_1.getMonth(initDate),
        focussedDate: initDate,
        selectedDate: initDate,
        showCalendar: false,
        allowCellFocus: false
    }), state = _c[0], dispatch = _c[1];
    var setFocussedDate = function (date) {
        dispatch({
            type: actionTypes.SET_FOCUSSED_DATE,
            payload: date
        });
    };
    React.useEffect(function () {
        window.addEventListener('keydown', onKeyDown);
        return function () { return window.removeEventListener('keydown', onKeyDown); };
    });
    React.useEffect(function () {
        document.addEventListener('click', onClickOutside, true);
        return function () {
            document.removeEventListener('click', onClickOutside, true);
        };
    });
    hooks_1.useUpdateEffect(function () {
        onSelect(state.selectedDate);
    }, [state.selectedDate]);
    var onClickOutside = function (event) {
        var isInput = inputRef &&
            inputRef.current &&
            inputRef.current.contains(event.target);
        var isCalendar = calendarRef &&
            calendarRef.current &&
            calendarRef.current.contains(event.target);
        if (event.target && state.showCalendar && !(isInput || isCalendar)) {
            dispatch({ type: actionTypes.HIDE_CALENDAR });
        }
    };
    var onInputKeyDown = function (event) {
        if (event.key === 'Down' || event.key === 'ArrowDown') {
            event.preventDefault();
            dispatch({ type: actionTypes.ALLOW_CELL_FOCUS });
            setFocussedDate(state.selectedDate);
        }
    };
    var onCellKeyDown = function (event) {
        var target = event.target;
        var isDisabled = target && target.matches('[aria-disabled="true"]');
        if (!state.allowCellFocus) {
            dispatch({ type: actionTypes.ALLOW_CELL_FOCUS });
        }
        switch (event.key) {
            case 'PageUp':
                event.preventDefault();
                setFocussedDate(date_fns_1.subMonths(state.focussedDate, 1));
                break;
            case 'PageDown':
                event.preventDefault();
                setFocussedDate(date_fns_1.addMonths(state.focussedDate, 1));
                break;
            case 'Up':
            case 'ArrowUp':
                event.preventDefault();
                setFocussedDate(date_fns_1.subDays(state.focussedDate, 7));
                break;
            case 'Down':
            case 'ArrowDown':
                event.preventDefault();
                setFocussedDate(date_fns_1.addDays(state.focussedDate, 7));
                break;
            case 'Left':
            case 'ArrowLeft':
                event.preventDefault();
                setFocussedDate(date_fns_1.subDays(state.focussedDate, 1));
                break;
            case 'Right':
            case 'ArrowRight':
                event.preventDefault();
                setFocussedDate(date_fns_1.addDays(state.focussedDate, 1));
                break;
            case 'Home':
                event.preventDefault();
                setFocussedDate(date_fns_1.startOfWeek(state.focussedDate));
                break;
            case 'End':
                event.preventDefault();
                setFocussedDate(date_fns_1.lastDayOfWeek(state.focussedDate));
                break;
            case 'Spacebar':
            case ' ':
            case 'Enter': {
                if (!isDisabled) {
                    event.preventDefault();
                    dispatch({
                        type: actionTypes.SET_SELECTED_DATE,
                        payload: state.focussedDate
                    });
                }
            }
        }
    };
    var onKeyDown = function (event) {
        if (!state.showCalendar) {
            return;
        }
        var target = event.target;
        var isInput = target && target.matches('input');
        var isTableCell = target && target.matches('td[role="button"]');
        if (event.key === 'Esc' || event.key === 'Escape') {
            dispatch({ type: actionTypes.HIDE_CALENDAR });
            return;
        }
        if (isInput) {
            onInputKeyDown(event);
            return;
        }
        if (isTableCell) {
            onCellKeyDown(event);
        }
    };
    var getContextValues = function () { return (__assign({}, state, { minDate: minDate,
        maxDate: maxDate,
        excludeDates: excludeDates,
        includeDates: includeDates,
        locale: locale,
        calendarRef: calendarRef,
        inputRef: inputRef })); };
    return (React.createElement(DatePickerContext_1.StateContext.Provider, { value: getContextValues() },
        React.createElement(DatePickerContext_1.DispatchContext.Provider, { value: dispatch },
            React.createElement("div", __assign({}, props), children))));
};
exports.default = DatePicker;
