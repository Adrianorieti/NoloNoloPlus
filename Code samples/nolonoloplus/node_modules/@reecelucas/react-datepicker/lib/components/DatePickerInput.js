"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
var React = require("react");
var date_fns_1 = require("date-fns");
var DatePickerContext_1 = require("./DatePickerContext");
var actionTypes = require("../reducer/actionTypes");
var DatePickerDescription_1 = require("./DatePickerDescription");
var date_1 = require("../helpers/date");
var function_1 = require("../helpers/function");
var hooks_1 = require("../helpers/hooks");
var constants_1 = require("../constants");
var DatePickerInput = function (_a) {
    var _b = _a.dateFormat, dateFormat = _b === void 0 ? 'dd/MM/yyyy' : _b, screenReaderMessage = _a.screenReaderMessage, props = __rest(_a, ["dateFormat", "screenReaderMessage"]);
    var dispatch = React.useContext(DatePickerContext_1.DispatchContext);
    var _c = React.useContext(DatePickerContext_1.StateContext), selectedDate = _c.selectedDate, showCalendar = _c.showCalendar, locale = _c.locale, inputRef = _c.inputRef;
    var _d = React.useState(props.placeholder ? '' : date_fns_1.format(selectedDate, dateFormat, { locale: locale })), value = _d[0], setValue = _d[1];
    var debouncedValue = hooks_1.useDebounce(value, 500);
    hooks_1.useUpdateEffect(function () {
        var newSelectedDate = date_fns_1.parse(debouncedValue, dateFormat, new Date());
        if (date_1.isEqualDate(newSelectedDate, selectedDate) ||
            !date_fns_1.isValid(newSelectedDate)) {
            return;
        }
        dispatch({
            type: actionTypes.SET_SELECTED_DATE,
            payload: newSelectedDate
        });
    }, [debouncedValue]);
    hooks_1.useUpdateEffect(function () {
        setValue(date_fns_1.format(selectedDate, dateFormat, { locale: locale }));
    }, [selectedDate]);
    var userOnChange = props.onChange, rest = __rest(props, ["onChange"]);
    var onChange = function (event) {
        if (function_1.isFunction(userOnChange)) {
            userOnChange(event);
        }
        setValue(event.target.value);
    };
    var onFocus = function () {
        dispatch({ type: actionTypes.PREVENT_CELL_FOCUS });
        if (!showCalendar) {
            dispatch({ type: actionTypes.SHOW_CALENDAR });
        }
    };
    return (React.createElement(React.Fragment, null,
        React.createElement("input", __assign({ ref: inputRef, type: 'text', value: value, onChange: onChange, onFocus: onFocus, "aria-describedby": constants_1.SCREEN_READER_MESSAGE_ID }, rest)),
        React.createElement(DatePickerDescription_1.default, { message: screenReaderMessage && function_1.isFunction(screenReaderMessage)
                ? screenReaderMessage()
                : screenReaderMessage })));
};
exports.default = DatePickerInput;
